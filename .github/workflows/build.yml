name: CD Workflow

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

concurrency:
  group: main
  cancel-in-progress: true

jobs:
  quality-assurance:
    name: Quality Assurance
    uses: ./.github/workflows/pr.yml

  push:
    name: Push image to ECR
    needs: quality-assurance
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env :
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY_NAME: "cisco_test_project/txt-sink-api"
          IMAGE_TAG: ${{ github.sha }}
          DJANGO_SUPERUSER_USERNAME: ${{ secrets.DJANGO_SUPERUSER_USERNAME }}
          DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
          DJANGO_SUPERUSER_EMAIL: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG $ECR_REGISTRY/$REPOSITORY_NAME:latest
          docker push $ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG
          docker push $ECR_REGISTRY/$REPOSITORY_NAME:latest
